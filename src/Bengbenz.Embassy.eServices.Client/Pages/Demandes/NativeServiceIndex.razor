@page "/services/aux-centrafricains"

<PageTitle>CAR e-Embassy - Services aux nationaux</PageTitle>

<MudStack Row="true" Spacing="3" Class="pb-5">
    <MudIcon Icon="@Icons.Material.Outlined.ContactMail" Size="Size.Large"/>
    <MudText Typo="Typo.h5" GutterBottom="true">Services aux nationaux</MudText>
    <MudSpacer/>
    <MudBreadcrumbs Class="pt-0" Items="_items"></MudBreadcrumbs>
</MudStack>

@if (serviceTypes == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudGrid>
        @foreach(var item in serviceTypes){
            <MudItem  xs="6" sm="3">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Secondary">@item.Title![0]</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@item.Title</MudText>
                            <MudText Typo="Typo.body2">@item.Summary</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardMedia Image="img/carte_rca_simple.png" Height="250" />
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@item.Description</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.ReadMore" Color="Color.Default" />
                        <MudSpacer />
                        <MudText Typo="Typo.h5">@($"{item.Price:##,##}")</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.EuroSymbol" Color="Color.Default" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private ServiceType[]? serviceTypes;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var titles = new[] { "Certificat de coutume et Célibat", "Attestation pour le PACS", "Certificat de célibat", "Attestation de concordance", "Certificat de vie", "Livret de famille" };
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        serviceTypes = Enumerable.Range(1, 4).Select(index => new ServiceType
        {
            Title = titles[Random.Shared.Next(titles.Length)],
            Summary = summaries[Random.Shared.Next(summaries.Length)],
            Price = Random.Shared.NextDouble()*100
        }).ToArray();
    }
    
    private readonly List<BreadcrumbItem> _items =
    [
        new BreadcrumbItem("Accueil", href: "/"),
        new BreadcrumbItem("Services", href: null, disabled: true),
        new BreadcrumbItem("Services aux nationaux", href: null, disabled: true)
    ];

    private class ServiceType
    {
        public long Id { get; set; }
        public string? Title { get; set; }
        public string? Summary { get; set; }
        public string? Description { get; set; }
        public string? Prerequisties { get; set; }
        public double Price { get; set; }
        public int VAT { get; set; }
        public DateOnly CreatedAt { get; set; }
        public DateOnly LastModifiedAt { get; set; }
    }

    private class Category
    {
        
    }
}