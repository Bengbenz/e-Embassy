@using Bengbenz.Embassy.eServices.Client.Services
@using Bengbenz.Embassy.eServices.UseCases.Categories.Create
@inject CategoryItemService CategoryItemService
@inject CreateCategoryRequestValidator CreateCategoryRequestValidator
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@TitleIcon" Class="mr-3" />
            @TitleContentText
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@ItemRequest" @ref="_form" Validation="@(CreateCategoryRequestValidator.ValidateValue)" ValidationDelay="1">
            @if (ItemRequest.ParentCategoryName is not null)
            {
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.subtitle2" Align="Align.Center">Category Parent :</MudText>
                        <MudText Typo="Typo.subtitle1" Align="Align.Center">@ItemRequest.ParentCategoryName</MudText>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            }
            <MudTextField @bind-Value="ItemRequest.Name"
                          For="@(() => ItemRequest.Name)"
                          Immediate="true"
                          InputType="InputType.Text"
                          Variant="Variant.Outlined"
                          Required="true"
                          Label="Nom"
                          HelperText="Donnez un nom à la catégorie"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">Annuler</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="@SubmitColor" Class="px-6 mr-4"
                   Disabled="@_processing" OnClick="Submit">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2"> @SubmitButtonText</MudText>
        }
        else
        {
            @SubmitButtonText
        }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }
    
    [Parameter]
    public string? TitleIcon { get; set; }
    [Parameter]
    public string? TitleContentText { get; set; }
    [Parameter]
    public string? SubmitButtonText { get; set; }
    [Parameter]
    public Color SubmitColor { get; set; }
    [Parameter]
    public CreateCategoryRequest ItemRequest { get; set; } = new();
    [Parameter]
    public EventCallback OnSaveClick { get; set; }

    private MudForm? _form;
    private bool _processing;
    
    private async Task Submit()
    {
        _processing = true;
        await _form!.Validate();
        if (_form.IsValid)
        {
            var result = await CategoryItemService.CreateAsync(ItemRequest);
            if (result is not null)
            {
                MudDialog!.Close(DialogResult.Ok(true));
                Snackbar.Add(new MarkupString($"Category <b><i>{ItemRequest.Name}</i></b> ajouté !"), Severity.Success);
                await OnSaveClick.InvokeAsync();
            }
        }
        _processing = false;
    }

    private void Cancel() => MudDialog!.Cancel();
}