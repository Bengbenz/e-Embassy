@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@*@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Bengbenz.Embassy.eServices.Server.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager*@
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<h5 class="fw-bold pb-5 text-center">Se Connecter</h5>
<MudStack Row="true" Class="justify-center pt-3" Spacing="4">
    <MudButton StartIcon="@Icons.Custom.Brands.Google" Variant="Variant.Outlined" Size="Size.Large">Google</MudButton>
    <MudButton StartIcon="@Icons.Custom.Brands.Apple" Variant="Variant.Outlined" Size="Size.Large">Apple</MudButton>
</MudStack>
<div class="text-center my-3 authentication-barrier">
    <span>Ou</span>
</div>
<div class="row gy-3">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <div class="col-xl-12">
            <MudTextField @bind-Value="Input.Email"
                          InputType="InputType.Email"
                          Variant="Variant.Outlined"
                          Label="Email"
                          autocomplete="username"
                          Required="true"/>
            <ValidationMessage For="() => Input.Email" class="text-danger"/>
        </div>
        <div class="col-xl-12">
            <MudTextField @bind-Value="Input.Password"
                          InputType="@_passwordInput"
                          Variant="Variant.Outlined"
                          Label="Mot de passe"
                          autocomplete="current-password"
                          Required="true"
                          Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password"/>
            <ValidationMessage For="() => Input.Password" class="text-danger"/>
        </div>
        <div class="col-xl-12">
            <MudStack Row="true">
                <MudCheckBox @bind-Value="Input.RememberMe" Size="Size.Medium" Dense="true" Label="Remember me"/>
                <MudSpacer></MudSpacer>
                <MudLink Href="Account/ForgotPassword" Class="text-default align-content-center" Color="Color.Primary">Mot de passe oublié ?</MudLink>
            </MudStack>
        </div>
        <div class="col-xl-12 d-grid mt-5">
            <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </div>
    </EditForm>
    <MudText Class="fs-14 text-muted mt-3">
        Pas encore de compte ?
        <MudLink Class="text-primary fw-semibold" Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> {["ReturnUrl"] = ReturnUrl}))">Créez-en un.</MudLink>
    </MudText>
</div>
<!--<div class="col-md-6 col-md-offset-2">
    <section>
        <h3>Use another service to log in.</h3>
        <hr />
        <ExternalLoginPicker />
    </section>
</div>-->

@code {
    private bool _isShowPassword;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    // [CascadingParameter]
    // private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // if (HttpMethods.IsGet(HttpContext.Request.Method))
        // {
        //     // Clear the existing external cookie to ensure a clean login process
        //     await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        // }
        await Task.CompletedTask;
    }

    public async Task LoginUser()
    {
        // // This doesn't count login failures towards account lockout
        // // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        // var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        // if (result.Succeeded)
        // {
        //     Logger.LogInformation("User logged in.");
        //     RedirectManager.RedirectTo(ReturnUrl);
        // }
        // else if (result.RequiresTwoFactor)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/LoginWith2fa",
        //         new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        // }
        // else if (result.IsLockedOut)
        // {
        //     Logger.LogWarning("User account locked out.");
        //     RedirectManager.RedirectTo("Account/Lockout");
        // }
        // else
        // {
        //     _errorMessage = "Error: Invalid login attempt.";
        // }
        await Task.CompletedTask;
    }
    
    void ShowPassword()
    {
        @if (_isShowPassword)
        {
            _isShowPassword = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else {
            _isShowPassword = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
